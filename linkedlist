#1) single linkedlist
class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class linkedlist:
    def __init__(self):
        self.head=None
    
    def insert(self,data):
        newNode =node(data)
        if (self.head):
            current=self.head
            while(current.next):
                current=current.next
            current.next=newNode
        else:
            self.head=newNode
    def printLL(self):
        current=self.head
        while current:
            print(current.data)
            current=current.next
l=linkedlist()
l.insert(20)
l.insert(30)
l.insert(40)
l.printLL()

#2)linkedlist with delete at end and insert at beginning
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=None
    def insert(self,data):
        newnode=node(data)
        if self.head:
            current=self.head
            while current.next:
                current=current.next
            current.next=newnode
        else:
            self.head=newnode
    def printll(self):
        if self.head:
            current=self.head
            while(current):
                print(current.data)
                current=current.next
        else:
            print("linkedlist is empty")
            
    def DeleteL(self):
        if self.head:
            current=self.head
            while(current.next):
                temp=current
                current=current.next
            temp.next=None
        else:
            print("linkedlist is empty")
    def insert_at_beggining(self,data):
        newnode=node(data)
        if self.head:
            temp=self.head
            self.head=newnode
            newnode.next=temp
        else:
            self.head=newnode
            
    
l=linkedlist()
l.insert(20)
l.insert(30)
l.insert(40)
l.printll()
print("---------")
l.DeleteL()
l.insert_at_beggining(10)
l.printll()

#3)double linkedlist with farward and backward traversal
class node:
    def __init__(self,data):
        self.prev=None
        self.data=data
        self.next=None
class DLL:
    def __init__(self):
        self.head=None
        self.tail=None
    def insert_node(self,data):
        newnode=node(data)
        if self.head is None:
            self.head=newnode
            self.tail=newnode
        else:
            current=self.head
            while current.next:
                current=current.next
            current.next=newnode
            current2=current.next
            current2.prev=current
            self.tail=current2
    def traversal(self):
        current=self.head
        while(current):
            print(current.data,end=",")
            current=current.next
        print()
    def rev_traversal(self):
        current=self.tail
        while(current):
            print(current.data,end=",")
            current=current.prev
        print()
dll=DLL()
dll.insert_node(10)
dll.insert_node(20)
dll.insert_node(30)
dll.insert_node(40)
dll.rev_traversal()
dll.traversal()
            
        


        
        
