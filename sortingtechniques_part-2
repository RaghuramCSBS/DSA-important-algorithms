#1)merge sort:
# Python program for implementation of MergeSort


def mergeSort(arr):
	if len(arr) > 1:

		# Finding the mid of the array
		mid = len(arr)//2

		# Dividing the array elements
		L = arr[:mid]

		# Into 2 halves
		R = arr[mid:]

		# Sorting the first half
		mergeSort(L)

		# Sorting the second half
		mergeSort(R)

		i = j = k = 0

		# Copy data to temp arrays L[] and R[]
		while i < len(L) and j < len(R):
			if L[i] <= R[j]:
				arr[k] = L[i]
				i += 1
			else:
				arr[k] = R[j]
				j += 1
			k += 1

		# Checking if any element was left
		while i < len(L):
			arr[k] = L[i]
			i += 1
			k += 1

		while j < len(R):
			arr[k] = R[j]
			j += 1
			k += 1


# Code to print the list
def printList(arr):
	for i in range(len(arr)):
		print(arr[i], end=" ")
	print()


# Driver Code
if __name__ == '__main__':
	arr = [12, 11, 13, 5, 6, 7]
	print("Given array is")
	printList(arr)
	mergeSort(arr)
	print("\nSorted array is ")
	printList(arr)




..............................................................................................................................................................
#2)quick_sort
def quick_sort(arr,start,end):
    if start<end:
        idx=partition(arr,start,end)
        quick_sort(arr,start,idx-1)
        quick_sort(arr,idx+1,end)
def partition(arr,low,high):
    start=low+1
    end=high
    pivot=arr[low]
    while True:
        while start<=end and arr[end]>=pivot:
            end-=1
        while start<=end and arr[start]<=pivot:
            start+=1
        if start<=end:
           arr[start],arr[end]=arr[end],arr[start]
        else:
            break
    arr[low],arr[end]=arr[end],arr[low]
    return end
arr=[9,5,2,1,4,7,9,6,10,11,5]
start=0
end=len(arr)-1
quick_sort(arr,start,end)
for i in arr:
    print(i,end=" ")

